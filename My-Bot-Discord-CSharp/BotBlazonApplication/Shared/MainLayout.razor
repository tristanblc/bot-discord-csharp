@using BotBlazonApplication.Services.Interface
@using BotBlazonApplication.Services.Service
@using BotBlazonApplication.Services.Classes
@using System.Net
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@inherits LayoutComponentBase

@inject ILocalStorage LocalStorage
 
@inject HttpClient Http

<CascadingValue Value="this">


<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">



			<div style="width:70px;text-align:right;">
				@if (loggedIn)
				{
					<a class="btn btn-sm btn-primary text-white" title="Account" href="account"><span class="oi oi-key"></span></a>
					<button class="btn btn-sm btn-danger" title="Logout" @onclick="Logout"><span class="oi oi-account-logout"></span></button>
				}
				else
				{
					<button class="btn btn-sm btn-success" title="Login" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
				}
			</div>
			


		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

</CascadingValue>


<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Login Form</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<label for="loginEmail" class="form-label">Email</label>
					<input type="email" class="form-control" id="loginEmail" placeholder="name@example.com" autocomplete="off" required @bind-value="user" />
				</div>
				<div class="mb-3">
					<label for="loginPassword" class="form-label">Password</label>
					<input type="password" class="form-control" id="loginPassword" required @bind-value="password" />
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-success" @onclick="Login">Login</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
			</div>
		</div>
	</div>
</div>


@code {
	private IAuthService authService;

	private bool show, display;

	internal static bool loggedIn;
	internal string? user;
	internal string? password;
	internal string? token;
	internal static User? User;

	public string? GetUserName()
	{
		return loggedIn ? user : null;
	}
	public string? GetPassword(){
		return loggedIn ? password : null;
	}


	public User? GetUser(){
		return loggedIn ? User : null;
	}

	internal void SetUser(User? user_){
		User = user_;
	}


	internal static string? GetToken(){
		return User.Token;
	}

	public async Task OpenLogin()
	{
		display = true;
		await Task.Delay(100);
		show = true;
	}

	public async Task Logout()
	{
		user = null;
		loggedIn = false;
		await LocalStorage.RemoveAsync("user");
		await LocalStorage.RemoveAsync("loggedAt");

	}

	private async Task Close()
	{
		show = false;
		await Task.Delay(500);
		display = false;
	}

	private async Task Login()
	{
		try{

			authService = new AuthService();


			if (!string.IsNullOrEmpty(user) && !string.IsNullOrEmpty(password))
			{

				var request = await  authService.Authentification(user,password);

				if (request.StatusCode == HttpStatusCode.OK)
				{
					var responseBody = await request.Content.ReadAsStringAsync();
					var reponseUser = JsonConvert.DeserializeObject<User>(responseBody);
					this.SetUser(reponseUser);					
					loggedIn = true;
					await LocalStorage.SaveStringAsync("user", user);
					await LocalStorage.SaveStringAsync("loggedAt", DateTime.Now.ToString());
					await Close();

				}

			}
		}
		catch(Exception ex){
			await Close();
		}
		
	}



	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		user = await LocalStorage.GetStringAsync("user");
		loggedIn = !string.IsNullOrEmpty(user);
	}
}